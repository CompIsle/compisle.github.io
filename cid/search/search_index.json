{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CompIsle MkDocs Under development : documents are sample content only Documentation repository for the CompIsle GitHub group. This is a collation rather than a collection - documents are included here if the best method of delivery is MarkDown fuelled HTML served via a static site. It is not a Wiki: documents here are essentially independent of each other and links between them are deprecated (fragile: likely to break ) About MkDocs For full documentation visit mkdocs.org . TODO Create Welcome page","title":"Home"},{"location":"#welcome-to-compisle-mkdocs","text":"Under development : documents are sample content only Documentation repository for the CompIsle GitHub group. This is a collation rather than a collection - documents are included here if the best method of delivery is MarkDown fuelled HTML served via a static site. It is not a Wiki: documents here are essentially independent of each other and links between them are deprecated (fragile: likely to break )","title":"Welcome to CompIsle MkDocs"},{"location":"#about-mkdocs","text":"For full documentation visit mkdocs.org .","title":"About MkDocs"},{"location":"#todo","text":"Create Welcome page","title":"TODO"},{"location":"TechInd/","text":"Technical Induction - Level 3 Year 1 Apps you will need on your local machine Windows Pro. Ok, not absolutely essential thank goodness, as an upgrade from Windows Home is not cheap, but there are some things you will not be able to do with Home. If buying a new machine during your time at College, definitely go for Pro. Office365. You get a free account courtesy of the college and it's a cloud app anyway, but note that you also get a licence and download link for the desktop versions of all the Office Apps if you need them. Git . Do not confuse GitHub - an online/cloud store for Git repositories - with Git, the software for managing/creating/downloading repositories locally. Visual Code. Do not confuse with Visual Studio (which you may also need but not until later). It can be downloaded here . You will spend a lot of time in Visual Code. Learning to use it well will make a great deal of difference to how you get on. That, and learn to touch type, are the two most practical tips I can give you (there are many great online sites to learn touch typing). Python. Get it from here . You will want the latest stable version of Python 3 (definitely not 2) and there may be some advantages in going for a 32-bit version. JS/TypeScript runtime. This will not be day one, so you can await your moment for making a choice here, but it is likely that at some point you will want the capability to develop server-side/local JavaScript or TpeScript applications. You will need a runtime. Your choices are node or deno . Broadly speaking it is a choice between older, better supported and newer, still-evolving. More than one browser ... anything web-related that you develop will need to be tested on at least two browsers. Chromium and Edge both use the Chrome engine so are pretty similar (in the sense that there is no need to use both). Firefox would be the other obvious choice and is very solid for web development. Microsoft Teams. Part of Office365 but also available as a desktop application which will give you greater capabilities. Install Teams on your phone too. It is our primary means of communication. Optional Local Packages You should be keeping anything irreplaceable in the cloud anyway, but some means of backing up your local machine is very useful and could save hours of re-installing software (let along the tens of hours getting all your preferences and options back where you want them). I commend AOMEI Backupper to you. Useful enough that I went for the paid version ... Bootstrap Studio. If you end up getting into web development this is a really useful package. As a student you can get a free licence via the Github Student Pack along with lots of other goodies. Hardware Needed Portable drive. A USB 3.2 Gen 1 or better, bus-powered, hard drive. Capacity fairly immaterial. A device based on an SSD is preferrable to one based on a 2.5\" HDD (more robust, faster) and the M2 SSD based types are also a lot smaller. Price bands are narrow. You won't get what you need for much less than \u00a340 and you are up into the sexy end of the market at \u00a3100. You can get away without one of these now that OneDrive + GitHub can be used for all your files, but that might be annoyingly slow for collections of hundreds of small files (a common situation when writing software) and thousands of files is not unusual for JavaScript development (at which point annoying is semantically equivalent to impossible). The USB naming system is mind-boggling, see here if you do not know your USB 3.2 Gen 1 from your USB 3.2 Gen 2 x 2. Be wary of anything labelled USB 3.0 or 3.1, technically these names have not existed since 2017 and the manufacturer is either a) lazy, b) pedddling old-stock, or c) trying to mislead you. Headphones/headset You will need a headset at home for use with voice calls in Teams (unles you have a webcam with mike set up) You will need to have headphones with you in College for accessing video resources/YouTube/tutorials etc. It will not be predictable when this wil occur so you will always need to have them with you. Probably a pair of bulky, expensive on-ear headphones are less appropriate than a cheap in-ear set that can be stuffed into a pocket. Webcam We avoid video calls where possible as some people find them uncomfortable and there is rarely any absolute need. However, there may be occasions when video calls are needed and if you are involved with any other departments of the College (Maths, English, Skills Support, student rep, student governor, ...) you may find them using Zoom. With either headsets or web cams make sure that you understand the security implications and know how to disable them. Optional A Raspberry Pi of your very own would be cool. You can get them here (other vendors exist). Your needs for the course would be met by a Pi Zero (under \u00a310) but the plus side of a Raspberry Pi 4 (on which you could spend up to \u00a374 if you think you need 8GB of RAM - you probably don't btw) is that it will run a full desktop at decent-ish speeds (4GB would be just as good for that) which gives you a backup machine if your Windows box won't boot one day. And if not ... has dozens of uses, caching proxy for that bandwidth intensive game, NAS, web server, media server ... Accounts on Web Services you will need Google We will be using + Google OAuth authentication to access other service + Google Drawing as our default vector graphics package + Google Drive/Sheets/Docs as an alternative to Microsoft especially when sharing/collaborating with people that may not have Office 365 + Google Cloud services (advanced, maybe not everyone, and you might prefer to use Microsoft Azure) for SQL databases, web servers, running public Docker containers, ... + Google Scholar for research If you have an existing Google account you may, of course, use it. If you have to create a new one, I ask that you select a username such that it is obvious to me which student belongs to that account. Ie, 'David3278' helpful, 'therubberduck' less so. Even if you have an existing personal account it might be useful to create another for professional purposes, don't forget that you can easily combine mailboxes so that e-mail/messages to either ends up in the same place. Finally note that you need at all times to have a current personal e-mail, to which you have access via your mobile phone, recorded in your college profile. Without this you will be unable to reset your password if you ever get locked out of your college account. Office 365 All students have an Office 365 account as part of their enrollment. You should aim to become aware of all the applications - which goes way beyond Office and Teams - that come with this. Finally not that this also includes the right to download the desktop versions of the Office suite on machines (3?) of your choice. Do bear in mind that these will revert to being unlicensed once you leave the College. One Drive Your \"My Documents\" will be on your College OneDrive via which you have effectively unlimited cloud storage that is secure. Do not: Save anything unique on the C: drive of whichever machine you happen to be using ... it will not follow you around and may vanish without warning if the machine is re-imaged. Use USB drives. They do (and will after some number of hours) fail without warning. Even use for moving file from home to college is poor technique as it throws the problem of verison management and remebering to upload back onto you. The correct approach is to use the cloud (OneDrive or GitHub). If you have a personal as well as a College OneDrive you need to make some decisions about how to manage it. Only one can be mirrored to a local folder at a time on each machine. What you can do though, is map the other OneDrive as a network disc so that it is accessible through a drive letter. Instructions are https://www.laptopmag.com/uk/articles/map-onedrive-network-drive here. Useful for your home machine, less so in College as you cannot create new drive mappings. Teams Teams will be our (tutors-you) primary means of electronic communication, file-sharing, making video and audio calls, holding online meetings, collaboration. You will need/want to install Teams on your mobile phone as well as your home machine for maximum convenience. It can also be accessed using the web from the Office365 portal although not all features will work without the desktop/mobile app installation (e.g. notifications ) GitHub Git itself is a version control system primarily aimed at source code (and its documentation, etc). It can cope with binary objects but is intended for and provides best for text. A collection of files under git control is called a repository and it is simple git clone .... to create a new and exactly equivalent copy of that repository. Git does a lot more than that, but that is the core. GitHub is a cloud service that provides storage for Git repositories . GitHub does a lot more than that, but that is the core. GitHub (now owned by Microsoft) offers both paid and free accounts. The most significant limitation of a free account is (usually) that you cannot create private repositories, only public ones (note that public repos are far more important in general - GitHub is the major mechanism for sharing and publishing repos). When creating source code your expected form of submission will be to provide the URL of a GitHub repo from where your source code can be obtained. Note, however, that keeping all of your assignments in the form of GitHub repos is recommended: it provides, with no extra effort, versioning, backup, archive, the ability to roll back in time to earlier versions, the ability to access your work anywhere ... As a student you will be able to create private repos even as a free user: once you notify your tutor of your GitHub username he will be able to add you to an organizational team. Source code provided to you (eg an assignment might be to extend or debug or add features to some existing code) will normally be provided as the url of a GitHub repo also. Same comments as for Google: it is helpful if which student you are can be deduced from your GitHub username. Repl.it Repl.it is a cloud-based IDE for developing source code in a huge variety of programming languages. It has the advantages of allowing you to program in (pretty much) any language (and a good number of frameworks) from anywhere you have network without the inconvenience of installing compilers, editors, IDEs, etc. Additionally, Repl.it allows for collaborative programming where any number of invitees can see (and if allowed edit) code being developed live. Repl.it does a lot more than that, but that is the core... A free account will be satisfactory for students. CodePen Similar to Repl.it but focussed narrowly on front-end web technologies, HTML, CSS, JS. We may not have occasion to use this at all during the first year. and strongly recommended LastPass or similar password manager I use LastPass. Other password managers exist. Use one . You will be creating a great number of accounts. Keeping track of dozens of different passwords is impossible. Using the same username and password across multiple sites is incredibly foolish. Generic skills and technologies that need to be mastered, not related to any particular unit. Markdown Markdown is used extensively throughout the course for creating documentation. Markdown is a lightweight markup language, it ultimately generates HTML but in comparison with HTML it is intended to be easier to edit and more-or-less human-readable without being rendered. It is also straightforward to convert Markdown into PDF. Use Markdown for: + making notes + creating submissions for assessment (should be submitted as PDF but original source maintained as Markdown) + creating technical documentation Creating/editing Markdown Many applications have Markdown capability, however, special mention is needed for + Visual Code. Standard Markdown is built-in and Extended Markdown, maths, UML diagrams, etc can be easily added by extensions. Visual Code also provides the fastest route for converting Markdown to PDF. Advantages: feature-rich, a lot of time will be in spent in Code anyway, can keep documentation and code 'connected', integration with GitHub. Disadvantages. Thought has to be given to where folders are kept (GitHub repos are probably best), no instant access from Android or iOS although Windows, Linux and OS-X are all supported. GitHub itself - *.md files can be edited directly on GitHub StackEdit - a browser extension that provides a full-featured Markdown editor. Advantages: supports a hierarchical document collection that can by synched with your choice of cloud services (DropBox, GutHub, Google Drive); more WYSIWYG than Code (and a cheat sheet!); accessible wherever you can get a browser. Disadvantages: ? + SimpleNote - An app available for at least the Web, Windows and Android. Very similar to StackEdit. Advantages: Clean, simple interface. Good on mobile too. Disadvantages: Not quite as full-featured as Stack Edit; synchs with its own web-app rather than public clouds, so possibly more thought needed on data security (although it is simple to import/export content for routine backup). Other text-oriented editors Sometimes the formatting capabilities of Markdown will not be sufficient to the task in which case we have these options + Word sources converted to PDF: use when hybrid text/data capabilities are needed, eg. if it is essential to embed a spreadsheet or when mail-merge is the objective; or when the format is part-graphical, e.g. to make extensive use of Word Art. + HTML + CSS: ultimate flexibility, more complexity. Can be rendered as a PDF or left as HTML/CSS. However, in this case it should either be reduced to single-file HTML (by embedding any CSS/images or possibly linking only via public URLs) or mounted on a server, eg Netlify or Git Sites. + If sophisticated layout facilities are needed, e.g. multifold leaflets or newsletters then consider using a proper DTP package such as Scribus. Once again, render to PDF for electronic submission. Software as a Service (SaaS) Some apps that don't fit into other categories are mentioned here 2D graphics Unless we are rich, we will not have a subscription to PhotoShop. Try these online alternatives Figma or Gravit for vector graphics/icons/UI design Pixlr for bitmap graphics If you need something more powerful than Pixlr, i) why are you not on a graphics course? ii) GIMP , but this is a desktop application (a free one) you would have to download and install. Data analysis/projection If you just need a UI to front your data then Glide is worth a look it lets you turn any Google Sheet into an app. Airtable has its most powerful features behind a paywall, but even the free version is pretty useful, it's a kind of spreadsheet database hybrid that allows cells to have complex content and cells/tables/rows/columsn to have relational links. 3D Graphics 3D graphics (modelling/texturing/rendering/animation) are both CPU and GPU heavy. If you need to do some serious modelling you wil probably have to bite the bullet and install Blender , free, but large and complex. You will not be able to do anything much without tutorials (YouTube has you covered, but watch the version numbers, the UI changed pretty considerably recenly, anything for Blender <2.8 is probably of little help) For more trivial modelling jobs, Paint 3D can be installed form the MS Store if it is not already on your machine. Checklist Installations (home machine). Installation includes checking it works btw [ ] Visual Code [ ] Python [ ] Git [ ] Teams (dekstop) [ ] Office desktop (as required) [ ] OneDrive desktop client (as required) [ ] Second browser of your choosing [ ] Password manager. Your choice. Also your choice as to online or local (on a USB key), but online is recommended (because it can work with your phone too). Do this before you start creating accounts [ ] PDF viewer (if none, Sumatra is a good (free) choice ) Note that you also need to be able to use these packages, so at least skimming some basic tutorials would be part of the task. Installation (mobile) [ ] Teams [ ] Learn (optional - see Learn for instructions) Accounts to create (free versions only unless you wish to do otherwise) [ ] GitHub [ ] Google [ ] Repl.it [ ] CodePen [ ] Airtable","title":"Induction"},{"location":"TechInd/#technical-induction-level-3-year-1","text":"","title":"Technical Induction - Level 3 Year 1"},{"location":"TechInd/#apps-you-will-need-on-your-local-machine","text":"Windows Pro. Ok, not absolutely essential thank goodness, as an upgrade from Windows Home is not cheap, but there are some things you will not be able to do with Home. If buying a new machine during your time at College, definitely go for Pro. Office365. You get a free account courtesy of the college and it's a cloud app anyway, but note that you also get a licence and download link for the desktop versions of all the Office Apps if you need them. Git . Do not confuse GitHub - an online/cloud store for Git repositories - with Git, the software for managing/creating/downloading repositories locally. Visual Code. Do not confuse with Visual Studio (which you may also need but not until later). It can be downloaded here . You will spend a lot of time in Visual Code. Learning to use it well will make a great deal of difference to how you get on. That, and learn to touch type, are the two most practical tips I can give you (there are many great online sites to learn touch typing). Python. Get it from here . You will want the latest stable version of Python 3 (definitely not 2) and there may be some advantages in going for a 32-bit version. JS/TypeScript runtime. This will not be day one, so you can await your moment for making a choice here, but it is likely that at some point you will want the capability to develop server-side/local JavaScript or TpeScript applications. You will need a runtime. Your choices are node or deno . Broadly speaking it is a choice between older, better supported and newer, still-evolving. More than one browser ... anything web-related that you develop will need to be tested on at least two browsers. Chromium and Edge both use the Chrome engine so are pretty similar (in the sense that there is no need to use both). Firefox would be the other obvious choice and is very solid for web development. Microsoft Teams. Part of Office365 but also available as a desktop application which will give you greater capabilities. Install Teams on your phone too. It is our primary means of communication.","title":"Apps you will need on your local machine"},{"location":"TechInd/#optional-local-packages","text":"You should be keeping anything irreplaceable in the cloud anyway, but some means of backing up your local machine is very useful and could save hours of re-installing software (let along the tens of hours getting all your preferences and options back where you want them). I commend AOMEI Backupper to you. Useful enough that I went for the paid version ... Bootstrap Studio. If you end up getting into web development this is a really useful package. As a student you can get a free licence via the Github Student Pack along with lots of other goodies.","title":"Optional Local Packages"},{"location":"TechInd/#hardware","text":"","title":"Hardware"},{"location":"TechInd/#needed","text":"Portable drive. A USB 3.2 Gen 1 or better, bus-powered, hard drive. Capacity fairly immaterial. A device based on an SSD is preferrable to one based on a 2.5\" HDD (more robust, faster) and the M2 SSD based types are also a lot smaller. Price bands are narrow. You won't get what you need for much less than \u00a340 and you are up into the sexy end of the market at \u00a3100. You can get away without one of these now that OneDrive + GitHub can be used for all your files, but that might be annoyingly slow for collections of hundreds of small files (a common situation when writing software) and thousands of files is not unusual for JavaScript development (at which point annoying is semantically equivalent to impossible). The USB naming system is mind-boggling, see here if you do not know your USB 3.2 Gen 1 from your USB 3.2 Gen 2 x 2. Be wary of anything labelled USB 3.0 or 3.1, technically these names have not existed since 2017 and the manufacturer is either a) lazy, b) pedddling old-stock, or c) trying to mislead you. Headphones/headset You will need a headset at home for use with voice calls in Teams (unles you have a webcam with mike set up) You will need to have headphones with you in College for accessing video resources/YouTube/tutorials etc. It will not be predictable when this wil occur so you will always need to have them with you. Probably a pair of bulky, expensive on-ear headphones are less appropriate than a cheap in-ear set that can be stuffed into a pocket. Webcam We avoid video calls where possible as some people find them uncomfortable and there is rarely any absolute need. However, there may be occasions when video calls are needed and if you are involved with any other departments of the College (Maths, English, Skills Support, student rep, student governor, ...) you may find them using Zoom. With either headsets or web cams make sure that you understand the security implications and know how to disable them.","title":"Needed"},{"location":"TechInd/#optional","text":"A Raspberry Pi of your very own would be cool. You can get them here (other vendors exist). Your needs for the course would be met by a Pi Zero (under \u00a310) but the plus side of a Raspberry Pi 4 (on which you could spend up to \u00a374 if you think you need 8GB of RAM - you probably don't btw) is that it will run a full desktop at decent-ish speeds (4GB would be just as good for that) which gives you a backup machine if your Windows box won't boot one day. And if not ... has dozens of uses, caching proxy for that bandwidth intensive game, NAS, web server, media server ...","title":"Optional"},{"location":"TechInd/#accounts-on-web-services-you-will-need","text":"Google We will be using + Google OAuth authentication to access other service + Google Drawing as our default vector graphics package + Google Drive/Sheets/Docs as an alternative to Microsoft especially when sharing/collaborating with people that may not have Office 365 + Google Cloud services (advanced, maybe not everyone, and you might prefer to use Microsoft Azure) for SQL databases, web servers, running public Docker containers, ... + Google Scholar for research If you have an existing Google account you may, of course, use it. If you have to create a new one, I ask that you select a username such that it is obvious to me which student belongs to that account. Ie, 'David3278' helpful, 'therubberduck' less so. Even if you have an existing personal account it might be useful to create another for professional purposes, don't forget that you can easily combine mailboxes so that e-mail/messages to either ends up in the same place. Finally note that you need at all times to have a current personal e-mail, to which you have access via your mobile phone, recorded in your college profile. Without this you will be unable to reset your password if you ever get locked out of your college account. Office 365 All students have an Office 365 account as part of their enrollment. You should aim to become aware of all the applications - which goes way beyond Office and Teams - that come with this. Finally not that this also includes the right to download the desktop versions of the Office suite on machines (3?) of your choice. Do bear in mind that these will revert to being unlicensed once you leave the College. One Drive Your \"My Documents\" will be on your College OneDrive via which you have effectively unlimited cloud storage that is secure. Do not: Save anything unique on the C: drive of whichever machine you happen to be using ... it will not follow you around and may vanish without warning if the machine is re-imaged. Use USB drives. They do (and will after some number of hours) fail without warning. Even use for moving file from home to college is poor technique as it throws the problem of verison management and remebering to upload back onto you. The correct approach is to use the cloud (OneDrive or GitHub). If you have a personal as well as a College OneDrive you need to make some decisions about how to manage it. Only one can be mirrored to a local folder at a time on each machine. What you can do though, is map the other OneDrive as a network disc so that it is accessible through a drive letter. Instructions are https://www.laptopmag.com/uk/articles/map-onedrive-network-drive here. Useful for your home machine, less so in College as you cannot create new drive mappings. Teams Teams will be our (tutors-you) primary means of electronic communication, file-sharing, making video and audio calls, holding online meetings, collaboration. You will need/want to install Teams on your mobile phone as well as your home machine for maximum convenience. It can also be accessed using the web from the Office365 portal although not all features will work without the desktop/mobile app installation (e.g. notifications ) GitHub Git itself is a version control system primarily aimed at source code (and its documentation, etc). It can cope with binary objects but is intended for and provides best for text. A collection of files under git control is called a repository and it is simple git clone .... to create a new and exactly equivalent copy of that repository. Git does a lot more than that, but that is the core. GitHub is a cloud service that provides storage for Git repositories . GitHub does a lot more than that, but that is the core. GitHub (now owned by Microsoft) offers both paid and free accounts. The most significant limitation of a free account is (usually) that you cannot create private repositories, only public ones (note that public repos are far more important in general - GitHub is the major mechanism for sharing and publishing repos). When creating source code your expected form of submission will be to provide the URL of a GitHub repo from where your source code can be obtained. Note, however, that keeping all of your assignments in the form of GitHub repos is recommended: it provides, with no extra effort, versioning, backup, archive, the ability to roll back in time to earlier versions, the ability to access your work anywhere ... As a student you will be able to create private repos even as a free user: once you notify your tutor of your GitHub username he will be able to add you to an organizational team. Source code provided to you (eg an assignment might be to extend or debug or add features to some existing code) will normally be provided as the url of a GitHub repo also. Same comments as for Google: it is helpful if which student you are can be deduced from your GitHub username. Repl.it Repl.it is a cloud-based IDE for developing source code in a huge variety of programming languages. It has the advantages of allowing you to program in (pretty much) any language (and a good number of frameworks) from anywhere you have network without the inconvenience of installing compilers, editors, IDEs, etc. Additionally, Repl.it allows for collaborative programming where any number of invitees can see (and if allowed edit) code being developed live. Repl.it does a lot more than that, but that is the core... A free account will be satisfactory for students. CodePen Similar to Repl.it but focussed narrowly on front-end web technologies, HTML, CSS, JS. We may not have occasion to use this at all during the first year.","title":"Accounts on Web Services you will need"},{"location":"TechInd/#and-strongly-recommended","text":"LastPass or similar password manager I use LastPass. Other password managers exist. Use one . You will be creating a great number of accounts. Keeping track of dozens of different passwords is impossible. Using the same username and password across multiple sites is incredibly foolish.","title":"and strongly recommended"},{"location":"TechInd/#generic-skills-and-technologies-that-need-to-be-mastered-not-related-to-any-particular-unit","text":"","title":"Generic skills and technologies that need to be mastered, not related to any particular unit."},{"location":"TechInd/#markdown","text":"Markdown is used extensively throughout the course for creating documentation. Markdown is a lightweight markup language, it ultimately generates HTML but in comparison with HTML it is intended to be easier to edit and more-or-less human-readable without being rendered. It is also straightforward to convert Markdown into PDF. Use Markdown for: + making notes + creating submissions for assessment (should be submitted as PDF but original source maintained as Markdown) + creating technical documentation","title":"Markdown"},{"location":"TechInd/#creatingediting-markdown","text":"Many applications have Markdown capability, however, special mention is needed for + Visual Code. Standard Markdown is built-in and Extended Markdown, maths, UML diagrams, etc can be easily added by extensions. Visual Code also provides the fastest route for converting Markdown to PDF. Advantages: feature-rich, a lot of time will be in spent in Code anyway, can keep documentation and code 'connected', integration with GitHub. Disadvantages. Thought has to be given to where folders are kept (GitHub repos are probably best), no instant access from Android or iOS although Windows, Linux and OS-X are all supported. GitHub itself - *.md files can be edited directly on GitHub StackEdit - a browser extension that provides a full-featured Markdown editor. Advantages: supports a hierarchical document collection that can by synched with your choice of cloud services (DropBox, GutHub, Google Drive); more WYSIWYG than Code (and a cheat sheet!); accessible wherever you can get a browser. Disadvantages: ? + SimpleNote - An app available for at least the Web, Windows and Android. Very similar to StackEdit. Advantages: Clean, simple interface. Good on mobile too. Disadvantages: Not quite as full-featured as Stack Edit; synchs with its own web-app rather than public clouds, so possibly more thought needed on data security (although it is simple to import/export content for routine backup).","title":"Creating/editing Markdown"},{"location":"TechInd/#other-text-oriented-editors","text":"Sometimes the formatting capabilities of Markdown will not be sufficient to the task in which case we have these options + Word sources converted to PDF: use when hybrid text/data capabilities are needed, eg. if it is essential to embed a spreadsheet or when mail-merge is the objective; or when the format is part-graphical, e.g. to make extensive use of Word Art. + HTML + CSS: ultimate flexibility, more complexity. Can be rendered as a PDF or left as HTML/CSS. However, in this case it should either be reduced to single-file HTML (by embedding any CSS/images or possibly linking only via public URLs) or mounted on a server, eg Netlify or Git Sites. + If sophisticated layout facilities are needed, e.g. multifold leaflets or newsletters then consider using a proper DTP package such as Scribus. Once again, render to PDF for electronic submission.","title":"Other text-oriented editors"},{"location":"TechInd/#software-as-a-service-saas","text":"Some apps that don't fit into other categories are mentioned here","title":"Software as a Service (SaaS)"},{"location":"TechInd/#2d-graphics","text":"Unless we are rich, we will not have a subscription to PhotoShop. Try these online alternatives Figma or Gravit for vector graphics/icons/UI design Pixlr for bitmap graphics If you need something more powerful than Pixlr, i) why are you not on a graphics course? ii) GIMP , but this is a desktop application (a free one) you would have to download and install.","title":"2D graphics"},{"location":"TechInd/#data-analysisprojection","text":"If you just need a UI to front your data then Glide is worth a look it lets you turn any Google Sheet into an app. Airtable has its most powerful features behind a paywall, but even the free version is pretty useful, it's a kind of spreadsheet database hybrid that allows cells to have complex content and cells/tables/rows/columsn to have relational links.","title":"Data analysis/projection"},{"location":"TechInd/#3d-graphics","text":"3D graphics (modelling/texturing/rendering/animation) are both CPU and GPU heavy. If you need to do some serious modelling you wil probably have to bite the bullet and install Blender , free, but large and complex. You will not be able to do anything much without tutorials (YouTube has you covered, but watch the version numbers, the UI changed pretty considerably recenly, anything for Blender <2.8 is probably of little help) For more trivial modelling jobs, Paint 3D can be installed form the MS Store if it is not already on your machine.","title":"3D Graphics"},{"location":"TechInd/#checklist","text":"","title":"Checklist"},{"location":"TechInd/#installations-home-machine-installation-includes-checking-it-works-btw","text":"[ ] Visual Code [ ] Python [ ] Git [ ] Teams (dekstop) [ ] Office desktop (as required) [ ] OneDrive desktop client (as required) [ ] Second browser of your choosing [ ] Password manager. Your choice. Also your choice as to online or local (on a USB key), but online is recommended (because it can work with your phone too). Do this before you start creating accounts [ ] PDF viewer (if none, Sumatra is a good (free) choice ) Note that you also need to be able to use these packages, so at least skimming some basic tutorials would be part of the task.","title":"Installations (home machine). Installation includes checking it works btw"},{"location":"TechInd/#installation-mobile","text":"[ ] Teams [ ] Learn (optional - see Learn for instructions)","title":"Installation (mobile)"},{"location":"TechInd/#accounts-to-create-free-versions-only-unless-you-wish-to-do-otherwise","text":"[ ] GitHub [ ] Google [ ] Repl.it [ ] CodePen [ ] Airtable","title":"Accounts to create (free versions only unless you wish to do otherwise)"},{"location":"Welcome/","text":"","title":"Welcome"},{"location":"pdf-from-markdown/","text":"Rendering Markdown as PDF within Visual Studio Code Intro There is more than one way to do this. The most flexible, which would give you the ability to convert Markdown into a bewildering number of formats including docx, is to install pandoc. If youe are interested, Dave Johnson covers it in detail in a blog . If all we want is to output Markdown as PDFs (and incidentally HTML) then there is an easier way, use Jebbs' marvellous Markdown Extended extension for Visual Studio Code. Install the extension If you are not sure how to add an extension to Visual Studio Code - then you probably aren't ready for this, but there is a video covering the process on the code website. So, we'll assume the extension is installed. Usage Markdown Extended vastly increases Visual Studio Code's markdown handling capabilities (which are already probably more extensive than you imagined, this article on the code website is well worth reading). To begin with it (rather obviously) adds support for Extended Markdown - see syntax guide which gives better support for tables and code blocks, footnotes, strikethrough, task lists .... All of these extended features can be disabled on a granular basis via the configuration file. It also provides an exporter which is capable of turning Markdown into PDF. To achieve this it uses a headless version of Chrome and the first time you try this it will need to be installed - so give permission when asked. It is then as easy as right-clicking somehere in your .md editor window, and selecting Export to File . The familiar VSC command dropdown will appear and you choose PDF file . After a few moments - depending on how complex your document is - a file with a .pdf extension will be created, alongside your original file (unless you have changed the default output folder in the extension's settings). This will only work entirely as expected if your Markdown is correct - so either use a linter (the markdownlint extension of David Anson works well although you may want to turn off warnings MD007 and MD036 with Extended Markdown) or examine VSC's preview carefully ( Ctrl-Shift-V opens the preview pane if clicking on icons is not your thing). I would also save the file before converting to PDF although the exporter does cope with unsaved changes. Why PDF? Markdown is a fine format until You want to use images, and ... Move the file Because then any local image links will break. So, for instance, if you have included screenshots there is a problem unless you have access to a CDN ... Also Markdown is potentially problematic if sharing with people who may not have a Markdown previewer. Both of these considerations apply with work for assessment. Converting your file into PDF has the effect of embedding the images in the document, so it becomes completely self-contained. As a bonus, it is also immutable. A quick guide to using images I usually proceed much as I do with HTML. Wherever I am editing my Markdown I have an img subfolder in which I put any images. Within my Markdown I can then add markup like this ![alt text](./img/imageone.png) or even better, using references rather than in-line urls (easier to maintain) ![alt text][image1] ... [image1]: ./img/imageone.png A note on styling The documents referenced back at the beginning would lead you to this but the TL;DR version is include an array of any stylesheets you want to use for markdown in your user or workspace settings \"markdown.styles\": [ \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\", \"./css/mystyles.css\" ] Other useful Markdown Extensions Markdown Math if you want full KaTeX support for mathematics and equations. Markdown Preview Mermaid Support if you need flow charts, state diagrams","title":"PDFs"},{"location":"pdf-from-markdown/#rendering-markdown-as-pdf-within-visual-studio-code","text":"","title":"Rendering Markdown as PDF within Visual Studio Code"},{"location":"pdf-from-markdown/#intro","text":"There is more than one way to do this. The most flexible, which would give you the ability to convert Markdown into a bewildering number of formats including docx, is to install pandoc. If youe are interested, Dave Johnson covers it in detail in a blog . If all we want is to output Markdown as PDFs (and incidentally HTML) then there is an easier way, use Jebbs' marvellous Markdown Extended extension for Visual Studio Code.","title":"Intro"},{"location":"pdf-from-markdown/#install-the-extension","text":"If you are not sure how to add an extension to Visual Studio Code - then you probably aren't ready for this, but there is a video covering the process on the code website. So, we'll assume the extension is installed.","title":"Install the extension"},{"location":"pdf-from-markdown/#usage","text":"Markdown Extended vastly increases Visual Studio Code's markdown handling capabilities (which are already probably more extensive than you imagined, this article on the code website is well worth reading). To begin with it (rather obviously) adds support for Extended Markdown - see syntax guide which gives better support for tables and code blocks, footnotes, strikethrough, task lists .... All of these extended features can be disabled on a granular basis via the configuration file. It also provides an exporter which is capable of turning Markdown into PDF. To achieve this it uses a headless version of Chrome and the first time you try this it will need to be installed - so give permission when asked. It is then as easy as right-clicking somehere in your .md editor window, and selecting Export to File . The familiar VSC command dropdown will appear and you choose PDF file . After a few moments - depending on how complex your document is - a file with a .pdf extension will be created, alongside your original file (unless you have changed the default output folder in the extension's settings). This will only work entirely as expected if your Markdown is correct - so either use a linter (the markdownlint extension of David Anson works well although you may want to turn off warnings MD007 and MD036 with Extended Markdown) or examine VSC's preview carefully ( Ctrl-Shift-V opens the preview pane if clicking on icons is not your thing). I would also save the file before converting to PDF although the exporter does cope with unsaved changes.","title":"Usage"},{"location":"pdf-from-markdown/#why-pdf","text":"Markdown is a fine format until You want to use images, and ... Move the file Because then any local image links will break. So, for instance, if you have included screenshots there is a problem unless you have access to a CDN ... Also Markdown is potentially problematic if sharing with people who may not have a Markdown previewer. Both of these considerations apply with work for assessment. Converting your file into PDF has the effect of embedding the images in the document, so it becomes completely self-contained. As a bonus, it is also immutable.","title":"Why PDF?"},{"location":"pdf-from-markdown/#a-quick-guide-to-using-images","text":"I usually proceed much as I do with HTML. Wherever I am editing my Markdown I have an img subfolder in which I put any images. Within my Markdown I can then add markup like this ![alt text](./img/imageone.png) or even better, using references rather than in-line urls (easier to maintain) ![alt text][image1] ... [image1]: ./img/imageone.png","title":"A quick guide to using images"},{"location":"pdf-from-markdown/#a-note-on-styling","text":"The documents referenced back at the beginning would lead you to this but the TL;DR version is include an array of any stylesheets you want to use for markdown in your user or workspace settings \"markdown.styles\": [ \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\", \"./css/mystyles.css\" ]","title":"A note on styling"},{"location":"pdf-from-markdown/#other-useful-markdown-extensions","text":"Markdown Math if you want full KaTeX support for mathematics and equations. Markdown Preview Mermaid Support if you need flow charts, state diagrams","title":"Other useful Markdown Extensions"},{"location":"CompSci/DataTypes/","text":"Defining and declaring constants and variables: This is taken directly from the spec as the 'types' students are expected to know about. This list is alphabetical and unstructured. It has some odd gaps (why array and set but not list ?), some ambiguities ( object as in JavaScript or object as in OOP, record as in databases or as in Pascal?), and cheerfully mixes fixed width types with variable length types and simple types with collection types. alphanumeric strings arrays Boolean characters date/time floating point (real) integers objects records sets strings This is a working version with i) obvious omissions added ii) more structure iii) a resolution of ambiguities Simple fixed length types These types can be stored in a fixed number of bits/bytes. The char type is implemented very differently in different programming languages and may not even exist. The decimal or currency type also tends to be handled differently in different systems and datetime may be integer float (real) datetime decimal(currency) boolean char Variable length types These types have a length and will require a number of bytes related to their length. In many systems strings will also have an associated encoding which wil affect their length (in bytes) string Collection types array list set dictionary (associative array) Complex types record object The distinction between these is otiose (look it up). Arguably record is a subset of object. A record is generally considered as a collection of data of potentially different types in named 'fields'. Usually a record has a fixed, global definition and cannot be altered in the course of a program. Objects are often considered as user-defined data types. They also contain fields that may be of any other defined type, but may have different collections of fields at different types and may also contain things that are not simply data, eg executable code ('methods'). Managing variables: local and global variables Differ in 'scope'. Can they interact with only one item/object/section of code or with everything in the program? naming conventions Most languages have ideas about good and bad ways of naming variables (and other things) maximumValue MaximumValue maximum-value maximum_value see https://www.python.org/dev/peps/pep-0008/#naming-conventions","title":"Data Types"},{"location":"CompSci/DataTypes/#defining-and-declaring-constants-and-variables","text":"This is taken directly from the spec as the 'types' students are expected to know about. This list is alphabetical and unstructured. It has some odd gaps (why array and set but not list ?), some ambiguities ( object as in JavaScript or object as in OOP, record as in databases or as in Pascal?), and cheerfully mixes fixed width types with variable length types and simple types with collection types. alphanumeric strings arrays Boolean characters date/time floating point (real) integers objects records sets strings This is a working version with i) obvious omissions added ii) more structure iii) a resolution of ambiguities","title":"Defining and declaring constants and variables:"},{"location":"CompSci/DataTypes/#simple-fixed-length-types","text":"These types can be stored in a fixed number of bits/bytes. The char type is implemented very differently in different programming languages and may not even exist. The decimal or currency type also tends to be handled differently in different systems and datetime may be integer float (real) datetime decimal(currency) boolean char","title":"Simple fixed length types"},{"location":"CompSci/DataTypes/#variable-length-types","text":"These types have a length and will require a number of bytes related to their length. In many systems strings will also have an associated encoding which wil affect their length (in bytes) string","title":"Variable length types"},{"location":"CompSci/DataTypes/#collection-types","text":"array list set dictionary (associative array)","title":"Collection types"},{"location":"CompSci/DataTypes/#complex-types","text":"record object The distinction between these is otiose (look it up). Arguably record is a subset of object. A record is generally considered as a collection of data of potentially different types in named 'fields'. Usually a record has a fixed, global definition and cannot be altered in the course of a program. Objects are often considered as user-defined data types. They also contain fields that may be of any other defined type, but may have different collections of fields at different types and may also contain things that are not simply data, eg executable code ('methods').","title":"Complex types"},{"location":"CompSci/DataTypes/#managing-variables","text":"local and global variables Differ in 'scope'. Can they interact with only one item/object/section of code or with everything in the program? naming conventions Most languages have ideas about good and bad ways of naming variables (and other things) maximumValue MaximumValue maximum-value maximum_value see https://www.python.org/dev/peps/pep-0008/#naming-conventions","title":"Managing variables:"},{"location":"CompSci/testing/","text":"Testing Websites/Pages Testing web pages is more difficult than testing code as a rule, because it is hard to pin down what a web page should do . Specifications are often framed fairly vaguely, e.g. 'be easy to navigate', which leaves the test engineers with a problem: how do you know? Traditionally a test-plan (at least for non user interface items) is framed something like this Test ID | Do this | Expected Outcome | Actual Outcome -------- | --------- | ---------------------- | ------------- 079 | Press button A | 4p should appear in slot C | nothing happens You are recommended to stick to this type of layout as far as possible. The aims of a good test plan are that it should Test all of the behaviour, ideally against the specification Be objective (it should not matter who is doing the testing or what they already know ) Be repeatable, the results should be the same every time Complete, objective, reproducible Since web pages (as opposed to endpoints, APIs, etc) clearly involve idiosyncratic user actions and very often value judgements all of these aims are challenging to achieve. Ideally tests should also be independent , it should be possible to run any selection of tests in any order with the same results. Without this, the test suite itself may become 'fragile' (as new tests are added, older ones may stop working). Test independence can be hard to achieve fully, but where a test depends upon the system being in a particular state (maybe as a result of a previous test) this must (at least!) be carefully documented. What we should aim to test with web pages Test standards compliance Do our HTML and CSS and JS pass code validation against the standards? We should also check legibility using online contrast checkers. Test consistency Ideally the specification will state - and if not a view must be taken - of which browsers it is reasonable to support. These should be identified (down to version number) in the test plan and then all tests repeated with each browser. It is not normally reasonable to try to support all browsers: IE6 anyone? Use of colours and fonts and layout should be consistent. Test all interactive elements Anything that responds in some way to user input should be tested. Things like buttons are fairly obvious, but do not overlook resizing the viewport, zooming, ... Test navigation All hyperlinks and other navigation elements must be tested. Test Formatting Everything should be sized correctly, nothing should overflow or 'blow out'. Graphics must be carefully checked for sizing, colour depth, etc. Check that everything behaves well at extreme sizes of the viewport. Test Content Does everything load correctly? Text must be proofread, no errors can be accepted on a public facing site. This should be done systematically, either content box by content box or against an asset list. Responsiveness* There should be targets for speed of loading. It can be hard (without specialist equipment) to make this really reproducible. Probably an average over several trials should be done. It can also be helpful (heading towards debugging and slightly away from testing) to look at web inspector to see where the loading time is being spent. Load testing* Commercial web sites should be tested under load with an expected number of users - this is virtually impossible to do without specialist equipment and must often be foregone on small sites. (*) These last two, and especially load testing, are server/network dependent also and we should keep our focus. Nevertheless unpleasant surprises should not happen. How to test Developer testing Much of the above can and should be tested by the developers both during and after implementation. Ideally also by specialist QA engineers who are not part of the development team. Good change logs (records of all changes made, when , by whom, why) will help a lot too. User testing There is no substitute for user testing. It does not matter if the navigation is working if none of the users can puzzle it out. It does not matter if colour and typography is consistent if all of the users hate it. Accessibility also needs attention and testing here. Automated testing In the world of programming automated testing is highly favoured (the easier tests are to run, the more often they will be run and the more bugs will be caught early). It is objective, and lack of reproducibility will show up quickly. Also it is much cheaper. Automated testing is harder to do with web pages (traditional programming has the same problems with graphical UIs), but there are some good frameworks around to assist. Selenium is one, very powerful, but complex to set up, Cypress is a popular and easier to use alternative. Both are going to require some familiarity with programming. Either can be used to automatically test navigation, interaction ... almost anything except aesthetics and usability. (c) A P Oliver Written with StackEdit .","title":"Testing"},{"location":"CompSci/testing/#testing-websitespages","text":"Testing web pages is more difficult than testing code as a rule, because it is hard to pin down what a web page should do . Specifications are often framed fairly vaguely, e.g. 'be easy to navigate', which leaves the test engineers with a problem: how do you know? Traditionally a test-plan (at least for non user interface items) is framed something like this Test ID | Do this | Expected Outcome | Actual Outcome -------- | --------- | ---------------------- | ------------- 079 | Press button A | 4p should appear in slot C | nothing happens You are recommended to stick to this type of layout as far as possible. The aims of a good test plan are that it should Test all of the behaviour, ideally against the specification Be objective (it should not matter who is doing the testing or what they already know ) Be repeatable, the results should be the same every time Complete, objective, reproducible Since web pages (as opposed to endpoints, APIs, etc) clearly involve idiosyncratic user actions and very often value judgements all of these aims are challenging to achieve. Ideally tests should also be independent , it should be possible to run any selection of tests in any order with the same results. Without this, the test suite itself may become 'fragile' (as new tests are added, older ones may stop working). Test independence can be hard to achieve fully, but where a test depends upon the system being in a particular state (maybe as a result of a previous test) this must (at least!) be carefully documented.","title":"Testing Websites/Pages"},{"location":"CompSci/testing/#what-we-should-aim-to-test-with-web-pages","text":"","title":"What we should aim to test with web pages"},{"location":"CompSci/testing/#test-standards-compliance","text":"Do our HTML and CSS and JS pass code validation against the standards? We should also check legibility using online contrast checkers.","title":"Test standards compliance"},{"location":"CompSci/testing/#test-consistency","text":"Ideally the specification will state - and if not a view must be taken - of which browsers it is reasonable to support. These should be identified (down to version number) in the test plan and then all tests repeated with each browser. It is not normally reasonable to try to support all browsers: IE6 anyone? Use of colours and fonts and layout should be consistent.","title":"Test consistency"},{"location":"CompSci/testing/#test-all-interactive-elements","text":"Anything that responds in some way to user input should be tested. Things like buttons are fairly obvious, but do not overlook resizing the viewport, zooming, ...","title":"Test all interactive elements"},{"location":"CompSci/testing/#test-navigation","text":"All hyperlinks and other navigation elements must be tested.","title":"Test navigation"},{"location":"CompSci/testing/#test-formatting","text":"Everything should be sized correctly, nothing should overflow or 'blow out'. Graphics must be carefully checked for sizing, colour depth, etc. Check that everything behaves well at extreme sizes of the viewport.","title":"Test Formatting"},{"location":"CompSci/testing/#test-content","text":"Does everything load correctly? Text must be proofread, no errors can be accepted on a public facing site. This should be done systematically, either content box by content box or against an asset list.","title":"Test Content"},{"location":"CompSci/testing/#responsiveness","text":"There should be targets for speed of loading. It can be hard (without specialist equipment) to make this really reproducible. Probably an average over several trials should be done. It can also be helpful (heading towards debugging and slightly away from testing) to look at web inspector to see where the loading time is being spent.","title":"Responsiveness*"},{"location":"CompSci/testing/#load-testing","text":"Commercial web sites should be tested under load with an expected number of users - this is virtually impossible to do without specialist equipment and must often be foregone on small sites. (*) These last two, and especially load testing, are server/network dependent also and we should keep our focus. Nevertheless unpleasant surprises should not happen.","title":"Load testing*"},{"location":"CompSci/testing/#how-to-test","text":"","title":"How to test"},{"location":"CompSci/testing/#developer-testing","text":"Much of the above can and should be tested by the developers both during and after implementation. Ideally also by specialist QA engineers who are not part of the development team. Good change logs (records of all changes made, when , by whom, why) will help a lot too.","title":"Developer testing"},{"location":"CompSci/testing/#user-testing","text":"There is no substitute for user testing. It does not matter if the navigation is working if none of the users can puzzle it out. It does not matter if colour and typography is consistent if all of the users hate it. Accessibility also needs attention and testing here.","title":"User testing"},{"location":"CompSci/testing/#automated-testing","text":"In the world of programming automated testing is highly favoured (the easier tests are to run, the more often they will be run and the more bugs will be caught early). It is objective, and lack of reproducibility will show up quickly. Also it is much cheaper. Automated testing is harder to do with web pages (traditional programming has the same problems with graphical UIs), but there are some good frameworks around to assist. Selenium is one, very powerful, but complex to set up, Cypress is a popular and easier to use alternative. Both are going to require some familiarity with programming. Either can be used to automatically test navigation, interaction ... almost anything except aesthetics and usability. (c) A P Oliver Written with StackEdit .","title":"Automated testing"},{"location":"CompSci/C%23%20and%20Python/BigDifferences/","text":"C# and Python The Big Differences Before getting into details, let's mention some of the big differences between C# and Python. C# is statically typed and Python is dynamically typed. Generally speaking when a variable is declared in C# you must also state the type of that variable, whereas Python will infer it. + A C# class inherits from one one and precisely one other class. Python supports multiple inheritance. Next","title":"C# and Python"},{"location":"CompSci/C%23%20and%20Python/BigDifferences/#c-and-python","text":"","title":"C# and Python"},{"location":"CompSci/C%23%20and%20Python/BigDifferences/#the-big-differences","text":"Before getting into details, let's mention some of the big differences between C# and Python. C# is statically typed and Python is dynamically typed. Generally speaking when a variable is declared in C# you must also state the type of that variable, whereas Python will infer it. + A C# class inherits from one one and precisely one other class. Python supports multiple inheritance. Next","title":"The Big Differences"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/","text":"C# and Python Comments and Code Blocks Comments C Line comments Line comments are introduced with a '//'. Everything from that point until the next NL is ignored. //This is a comment Console.WriteLine(\"Hello\"); // So is this Block comments Block comments are introduced with a / and terminate with / /* Everything until the end of the comment is a comment */ Documentation C# (in Visual Studio!) supports auto documentation via '///' comments. In the approproriate context (immediately before a structure) these cause a template to be inserted by Visual Studio that is appropriate to what is being documented. These comments are then converted into an XML file (either internal or as a separate file depending upon Project Properties) which can be further process by documentation tools (e.g. will produce automatic tooltips in Visual Studio or read-and-rendered by the Object Browser) ///<summary> /// ... a summary of Fred's purpose ///<summary> public class Fred() ... Python Line comments Use a '#' for a line comment in Python # This is a comment Block comments Docstrings (see below) are often used for multiline block-comments Documentation Triple quotes, ''' or \"\"\" , may be used to mark the beginning and end of a multi-line string literal. If 'bare', i.e. not used as part of an expression, these generate no code and are equivalent to multi-line comments. These are traditionally used as DOCSTRINGS immediately after the first line of a structure in which case they will be automatically made available via the __doc__ special attribute and used by such things as help. class Fred: ''' Fred's docstring starts here and goes on as long as you wish up to here ''' pass Code Blocks C A block of code is surrounded by '{' and '}' These delimiters are often syntactically unnecessary when a block is a single statement (e.g. an if or for governing a single statement). A block can be introduced at any arbitrary point where you wish to create a new scope. Statements are multi-line ... in the sense that white space and EOL are ignored ... and terminated by a ; Python A block of code is marked by its indentation. Consequently there are many places in Python source code where indentation/outdentation is required it rarely an optional formatting feature. You may not use indents to create arbitrary scope. Python will treat any combination of spaces and tabs as creating an indent but it must then be used consistently until the end of that source file . Irregular tabbing is a common problem especially when importing and then further editing. Consequently the Python style guide recommends that an indent is always four spaces. Many editors wil replace a tab with four spaces automatically when editing Python. Statements are terminated by EOL although syntactically incomplete statements continue as required. A ';' may be used to separate two statements on a single line although there is rarely a need for this and it is likely to confuse. A ':' must be used to conclude the first line of class and method declarations, if statements and the like. class Fred: ''' Note the : Note the indent. Everything that follows is part of the class until the next outdent ''' pass Python has the pass keyword which is a syntactic no-op and can be used where something (a class, a function) requires a body but we wish to provide nothing.","title":"C# and Python"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#c-and-python","text":"","title":"C# and Python"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#comments-and-code-blocks","text":"","title":"Comments and Code Blocks"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#comments","text":"","title":"Comments"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#c","text":"","title":"C"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#line-comments","text":"Line comments are introduced with a '//'. Everything from that point until the next NL is ignored. //This is a comment Console.WriteLine(\"Hello\"); // So is this","title":"Line comments"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#block-comments","text":"Block comments are introduced with a / and terminate with / /* Everything until the end of the comment is a comment */","title":"Block comments"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#documentation","text":"C# (in Visual Studio!) supports auto documentation via '///' comments. In the approproriate context (immediately before a structure) these cause a template to be inserted by Visual Studio that is appropriate to what is being documented. These comments are then converted into an XML file (either internal or as a separate file depending upon Project Properties) which can be further process by documentation tools (e.g. will produce automatic tooltips in Visual Studio or read-and-rendered by the Object Browser) ///<summary> /// ... a summary of Fred's purpose ///<summary> public class Fred() ...","title":"Documentation"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#python","text":"","title":"Python"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#line-comments_1","text":"Use a '#' for a line comment in Python # This is a comment","title":"Line comments"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#block-comments_1","text":"Docstrings (see below) are often used for multiline block-comments","title":"Block comments"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#documentation_1","text":"Triple quotes, ''' or \"\"\" , may be used to mark the beginning and end of a multi-line string literal. If 'bare', i.e. not used as part of an expression, these generate no code and are equivalent to multi-line comments. These are traditionally used as DOCSTRINGS immediately after the first line of a structure in which case they will be automatically made available via the __doc__ special attribute and used by such things as help. class Fred: ''' Fred's docstring starts here and goes on as long as you wish up to here ''' pass","title":"Documentation"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#code-blocks","text":"","title":"Code Blocks"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#c_1","text":"A block of code is surrounded by '{' and '}' These delimiters are often syntactically unnecessary when a block is a single statement (e.g. an if or for governing a single statement). A block can be introduced at any arbitrary point where you wish to create a new scope. Statements are multi-line ... in the sense that white space and EOL are ignored ... and terminated by a ;","title":"C"},{"location":"CompSci/C%23%20and%20Python/Comments-and-Code-Blocks/#python_1","text":"A block of code is marked by its indentation. Consequently there are many places in Python source code where indentation/outdentation is required it rarely an optional formatting feature. You may not use indents to create arbitrary scope. Python will treat any combination of spaces and tabs as creating an indent but it must then be used consistently until the end of that source file . Irregular tabbing is a common problem especially when importing and then further editing. Consequently the Python style guide recommends that an indent is always four spaces. Many editors wil replace a tab with four spaces automatically when editing Python. Statements are terminated by EOL although syntactically incomplete statements continue as required. A ';' may be used to separate two statements on a single line although there is rarely a need for this and it is likely to confuse. A ':' must be used to conclude the first line of class and method declarations, if statements and the like. class Fred: ''' Note the : Note the indent. Everything that follows is part of the class until the next outdent ''' pass Python has the pass keyword which is a syntactic no-op and can be used where something (a class, a function) requires a body but we wish to provide nothing.","title":"Python"},{"location":"CompSci/C%23%20and%20Python/Introduction/","text":"C# and Python A guide to relative syntax The purpose of this guide is to explore the language features of C# and Python identifying similarities and differences. It does not teach you how to program, nor does it explain the 'best' practices or paradigms for each language. Next","title":"C# and Python"},{"location":"CompSci/C%23%20and%20Python/Introduction/#c-and-python","text":"","title":"C# and Python"},{"location":"CompSci/C%23%20and%20Python/Introduction/#a-guide-to-relative-syntax","text":"The purpose of this guide is to explore the language features of C# and Python identifying similarities and differences. It does not teach you how to program, nor does it explain the 'best' practices or paradigms for each language. Next","title":"A guide to relative syntax"},{"location":"Departmental%20Policies/plagiarism/","text":"Plagiarism Plagiarism is presenting someone else's work or ideas as your own, with or without their consent, by incorporating it into your work without full acknowledgement. All published and unpublished material, whether in manuscript, printed or electronic form, is covered under this definition. Plagiarism | University of Oxford, viewed 02 09 2020, (https://www.ox.ac.uk/students/academic/guidance/skills/plagiarism) The above is an example of a quotation with a reference . We often - especially in IT - need to use other people's work. If asked for a definition is it much better to give one from, say, Wikipedia, that has been carefully peer-reviewed, than to just make something up. This is quite permissible so long as it is referenced , in other words you are not passing it off as your own original work but say instead where it came from. A piece of work that is largely quotations can still be judged highly: you are displaying your scholarship and your skill in finding evidence. Explain why the material is relevant, what it proves, and why you chose to include it. Unreferenced though, it becomes plagiarism, which is a disciplinary offence in all academic settings. In your context, the very minimum sanction you can expect for plagiarism in assessed work is having the work rejected in its entirety. You would have to do it again - which implies resit or 2nd submission territory. If already a resit then you have failed the unit and most likely your course. In more egregious cases, suspension or withdrawal are possible even at a first submission. And a 'conviction' for plagiarism is not something you want on your disciplinary record. If another student presents your work as their own, then you will both be deemed guilty of plagiarism. Even if it is quite clear who is the original author you will be regarded as having facilitated the offence by making your work available[^1] unless it is beyond doubt that it was stolen and no permission or consent or assistance was furnished. Therefore you need to be very cautious of allowing another student the opportunity to copy your work. Never provide another student with a copy of your assignment in an editable format . You might trust them, but do you really want to trust another person that much? Your whole course? And what legitimate reason could they have for asking that could not be met in another, safer, way? If you feel that there is a good reason, then provide notes only, a PDF, hard-copy, access on your screen only, ... Even your tutors have no reason nor need to have your work in editable format. This is one reason why you are encouraged to submit in PDF format where possible. It is very easy to publicly expose your work to other students without thinking it through ... sharing files on Teams, or OneDrive, public repos on GitHub. Be mindful of the risks. [^1]: It is permissable to quote another student's work if referenced and with the author's permission. See any good guide to referencing for how to reference unpublished work. Ashley Oliver, Sep 2020","title":"Plagiarism"},{"location":"Departmental%20Policies/plagiarism/#plagiarism","text":"Plagiarism is presenting someone else's work or ideas as your own, with or without their consent, by incorporating it into your work without full acknowledgement. All published and unpublished material, whether in manuscript, printed or electronic form, is covered under this definition. Plagiarism | University of Oxford, viewed 02 09 2020, (https://www.ox.ac.uk/students/academic/guidance/skills/plagiarism) The above is an example of a quotation with a reference . We often - especially in IT - need to use other people's work. If asked for a definition is it much better to give one from, say, Wikipedia, that has been carefully peer-reviewed, than to just make something up. This is quite permissible so long as it is referenced , in other words you are not passing it off as your own original work but say instead where it came from. A piece of work that is largely quotations can still be judged highly: you are displaying your scholarship and your skill in finding evidence. Explain why the material is relevant, what it proves, and why you chose to include it. Unreferenced though, it becomes plagiarism, which is a disciplinary offence in all academic settings. In your context, the very minimum sanction you can expect for plagiarism in assessed work is having the work rejected in its entirety. You would have to do it again - which implies resit or 2nd submission territory. If already a resit then you have failed the unit and most likely your course. In more egregious cases, suspension or withdrawal are possible even at a first submission. And a 'conviction' for plagiarism is not something you want on your disciplinary record. If another student presents your work as their own, then you will both be deemed guilty of plagiarism. Even if it is quite clear who is the original author you will be regarded as having facilitated the offence by making your work available[^1] unless it is beyond doubt that it was stolen and no permission or consent or assistance was furnished. Therefore you need to be very cautious of allowing another student the opportunity to copy your work. Never provide another student with a copy of your assignment in an editable format . You might trust them, but do you really want to trust another person that much? Your whole course? And what legitimate reason could they have for asking that could not be met in another, safer, way? If you feel that there is a good reason, then provide notes only, a PDF, hard-copy, access on your screen only, ... Even your tutors have no reason nor need to have your work in editable format. This is one reason why you are encouraged to submit in PDF format where possible. It is very easy to publicly expose your work to other students without thinking it through ... sharing files on Teams, or OneDrive, public repos on GitHub. Be mindful of the risks. [^1]: It is permissable to quote another student's work if referenced and with the author's permission. See any good guide to referencing for how to reference unpublished work. Ashley Oliver, Sep 2020","title":"Plagiarism"},{"location":"Departmental%20Policies/workflow/","text":"Workflow - How to create, manage, store, submit work This guide is primarily aimed at L3 students, but is good general guidance This guide is mostly advisory, generally speaking we are less concerned with 'how' than with 'what'. Where things are course requirements they wil be in bold. Notes and Research It is highly recommended that you create notes using Markdown (ie plain text with Markdown markup). Reasons: + Commonality with how you will have to work for web site/source code documentation + Being able to 'live' within either the browser or Visual Code and not have to duck out into other applications + Flexibility of rendering as either HTML (view on screen) or PDF (screen/print) + Ease of linking to other documents + It has just enough functionality for notes (images, hyperlinks, formatting) without being over complex. It is very easily searchable (being just text). + directly editable within eg GitHub What you are going to use to take notes is a matter of opinion. My narrow recommendation would be Visual Code but there are good arguments for StackEdit (I spend a lot of time in the browser) or SimpleNotes (I want a native mobile app too). Note that 'just text' (Markdown) is very portable so individual files can be moved freely between all of these. Do note though, that incorporating images that are local - not accessed through http as a URL but files - will only work well with Code. There are reasonably obvious workarounds for the others, but it is something to think about. (Matters because you may well need to add screenshots to your notes) Where your notes live is going to be a function of convenience, security, and what application you are using. Code users would almost certainly want to make use of Code's excellent Git integrations to keep their notes in a Git repository and synced with GitHub. Alternatively, keeping the folder structure on OneDrive and ignoring GitHub would be possible, but decide yourself whether this sacrifices useful features for illusory convenience). StackEdit users will find sync built into StackEdit. Syncing is possible with Google Drive and GitHub (amongst others) though sadly OneDrive is not supported. SimpleNotes has its own 'on server' sync feature, so registration via the web site is needed. My final recommendation would be Code. StackEdit and SimpleNotes are both excellent for notes, but have weaknesses for assignments (eg. StackEdit will not let you render output as PDF on a free account) which means that at some point you will need to use Code anyway. There may be gains in using one tool for everything. Assignments Assignments will be submitted as PDFs and/or links to GitHub repos. Exceptions may exist for specific units or assignments, for instance in the Digitial Graphics and Animations unit, your tutor will undoubtedly want other file formats used. Follow your tutor's instructions, do not deviate from the above without instructions. I can (and am quite likley to) configure Learn to accept only PDF by default. There are two reasons for this: i) PDF is non-editable (well, mostly) and it is not appropriate that your work could be edited in any way by you, me, anyone after it has been submitted for assessment ii) PDF can be read by anyone on any operating system using free tools, unlike (e.g.) Word. PDFs can't be used for things that have to do something, projects, apps, web sites, so for those you will upload the url of a GitHub repo. These are editable, but all changes are tracked so there is still a robust audit trail. (btw GitHub repo is used broadly here, Gists count too) Outline workflow for a documentation assignment Create a private repo on GitHub in your organizational team area Clone the repo locally Create your document as Markdown marked text, possibly linking to other local resources (eg images) Commit and sync your repo as the work progresses Output as a PDF (this embeds local resources giving an independent single-file result). Proofread. Repeat as necessary. Upload the PDF to Learn Outline workflow for a project assignment Create a private repo on GitHub in your organizational team area Clone the repo locally Create your source tree Commit and sync your repo as the work progresses Test. Repeat as necessary. Sync Upload the GitHub url to Learn","title":"Workflow"},{"location":"Departmental%20Policies/workflow/#workflow-how-to-create-manage-store-submit-work","text":"","title":"Workflow - How to create, manage, store, submit work"},{"location":"Departmental%20Policies/workflow/#this-guide-is-primarily-aimed-at-l3-students-but-is-good-general-guidance","text":"This guide is mostly advisory, generally speaking we are less concerned with 'how' than with 'what'. Where things are course requirements they wil be in bold.","title":"This guide is primarily aimed at L3 students, but is good general guidance"},{"location":"Departmental%20Policies/workflow/#notes-and-research","text":"It is highly recommended that you create notes using Markdown (ie plain text with Markdown markup). Reasons: + Commonality with how you will have to work for web site/source code documentation + Being able to 'live' within either the browser or Visual Code and not have to duck out into other applications + Flexibility of rendering as either HTML (view on screen) or PDF (screen/print) + Ease of linking to other documents + It has just enough functionality for notes (images, hyperlinks, formatting) without being over complex. It is very easily searchable (being just text). + directly editable within eg GitHub What you are going to use to take notes is a matter of opinion. My narrow recommendation would be Visual Code but there are good arguments for StackEdit (I spend a lot of time in the browser) or SimpleNotes (I want a native mobile app too). Note that 'just text' (Markdown) is very portable so individual files can be moved freely between all of these. Do note though, that incorporating images that are local - not accessed through http as a URL but files - will only work well with Code. There are reasonably obvious workarounds for the others, but it is something to think about. (Matters because you may well need to add screenshots to your notes) Where your notes live is going to be a function of convenience, security, and what application you are using. Code users would almost certainly want to make use of Code's excellent Git integrations to keep their notes in a Git repository and synced with GitHub. Alternatively, keeping the folder structure on OneDrive and ignoring GitHub would be possible, but decide yourself whether this sacrifices useful features for illusory convenience). StackEdit users will find sync built into StackEdit. Syncing is possible with Google Drive and GitHub (amongst others) though sadly OneDrive is not supported. SimpleNotes has its own 'on server' sync feature, so registration via the web site is needed. My final recommendation would be Code. StackEdit and SimpleNotes are both excellent for notes, but have weaknesses for assignments (eg. StackEdit will not let you render output as PDF on a free account) which means that at some point you will need to use Code anyway. There may be gains in using one tool for everything.","title":"Notes and Research"},{"location":"Departmental%20Policies/workflow/#assignments","text":"Assignments will be submitted as PDFs and/or links to GitHub repos. Exceptions may exist for specific units or assignments, for instance in the Digitial Graphics and Animations unit, your tutor will undoubtedly want other file formats used. Follow your tutor's instructions, do not deviate from the above without instructions. I can (and am quite likley to) configure Learn to accept only PDF by default. There are two reasons for this: i) PDF is non-editable (well, mostly) and it is not appropriate that your work could be edited in any way by you, me, anyone after it has been submitted for assessment ii) PDF can be read by anyone on any operating system using free tools, unlike (e.g.) Word. PDFs can't be used for things that have to do something, projects, apps, web sites, so for those you will upload the url of a GitHub repo. These are editable, but all changes are tracked so there is still a robust audit trail. (btw GitHub repo is used broadly here, Gists count too)","title":"Assignments"},{"location":"Departmental%20Policies/workflow/#outline-workflow-for-a-documentation-assignment","text":"Create a private repo on GitHub in your organizational team area Clone the repo locally Create your document as Markdown marked text, possibly linking to other local resources (eg images) Commit and sync your repo as the work progresses Output as a PDF (this embeds local resources giving an independent single-file result). Proofread. Repeat as necessary. Upload the PDF to Learn","title":"Outline workflow for a documentation assignment"},{"location":"Departmental%20Policies/workflow/#outline-workflow-for-a-project-assignment","text":"Create a private repo on GitHub in your organizational team area Clone the repo locally Create your source tree Commit and sync your repo as the work progresses Test. Repeat as necessary. Sync Upload the GitHub url to Learn","title":"Outline workflow for a project assignment"},{"location":"ResponsiveDesign/responsiveDesign/","text":"Layout/Responsive Design Example Brief On an xs/sm display we want the following elements + Header + Nav + Img + Text (eg, a card or similar) + List of links Laid out vertically. Once the page is larger than sm we want the header and nav still to be full-width, stacked vertically but the list should now be on the left at roughly 1/4 of the page width with the main content on the right at roughly 3/4. Start with mobile Blocks stack vertically by default and are full-width by default. So, that's easy. <header> <h1> Header </h1> <header> <nav> <div> Nav content </div> <nav> <div> Main content </div> <aside> <ul> List Content </ul> </aside> prefer header and nav and aside to more generic div s - it is what they are for the desktop design though, we are goign to want to swap the order of the main and the aside and also have them horizontally and sized. Let's prepare for that by putting these two elements in a row of a fluid container, but initially set to full width and existing order. <header> <h1> Header </h1> </header> <nav> <div> Nav content </div> </nav> <div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-12 order-1\"> Main content </div> <aside class=\"col-12 order-2\"> <ul> List Content </ul> </aside> </div> </div> This will indent the main and aside slightly as the container elements will have a gutter around them. If we do not want that we can adjust the gutters. For the desktop version, we need to add some -md classess affecting the width and order of the main and aside. <header> <h1> Header </h1> </header> <nav> <div> Nav content </div> </nav> <div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-12 col-9-md order-1 order-2-md\"> Main content </div> <aside class=\"col-12 col-3-md order-2 order-1-md\"> <ul> List Content </ul> </aside> </div> </div> At this point the elements are in the correct arrangement and order and we would need to start adding more realistic content and worrying about the sizing. The header will be close. Let's add some color classes and see how it looks. We'll also center the text and add a little padding. ... <header class=\"bg-primary text-white p-2 text-center\"> <h1> Header </h1> </header> ... Note carefully where things are applied. The background and text colours are applied on the header so as to affect everything inside then. No work wil be done on styling the nav element. We just paste in a standard bootstrap navbar to get a feel for how things look. Notice that this completely replaces the original nav element ... <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\"> <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"#\">Link</a> </li> <li class=\"nav-item\"> <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav> ... The one thing you will (probably) want to do is change the navbar-expand-lg to navbar-expand-md so that the bar is show expanded on the desktop display We've done a bit so let's have the full html to this point. <!DOCTYPE html> <html> <head> <meta charset='UTF-8'> <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css'> <link rel='stylesheet' href='styles.css'> </head> <body> <header class=\"bg-primary text-white p-2 text-center\"> <h1>Header</h1> </header> <nav class=\"navbar navbar-expand-md navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\"> <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"#\">Link</a> </li> <li class=\"nav-item\"> <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav> <div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-12 col-md-9 order-1 order-md-2\"> Main content </div> <aside class=\"col-12 col-md-3 order-2 order-md-1\"> <ul> List Content? </ul> </aside> </div> </div> <script src='https://code.jquery.com/jquery-3.3.1.slim.min.js'></script> <script src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js'></script> <script src='https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js'></script> </body> </html> Next the aside list. This is going to be purely dummy content, so let's take a Bootstrap List Group. ... <aside class=\"col-12 col-md-3 order-2 order-md-1\"> <ul class=\"list-group\"> <li class=\"list-group-item active\">Cras justo odio</li> <li class=\"list-group-item\">Dapibus ac facilisis in</li> <li class=\"list-group-item\">Morbi leo risus</li> <li class=\"list-group-item\">Porta ac consectetur ac</li> <li class=\"list-group-item\">Vestibulum at eros</li> </ul> </aside> ...","title":"Responsive Design"},{"location":"ResponsiveDesign/responsiveDesign/#layoutresponsive-design-example","text":"","title":"Layout/Responsive Design Example"},{"location":"ResponsiveDesign/responsiveDesign/#brief","text":"On an xs/sm display we want the following elements + Header + Nav + Img + Text (eg, a card or similar) + List of links Laid out vertically. Once the page is larger than sm we want the header and nav still to be full-width, stacked vertically but the list should now be on the left at roughly 1/4 of the page width with the main content on the right at roughly 3/4.","title":"Brief"},{"location":"ResponsiveDesign/responsiveDesign/#start-with-mobile","text":"Blocks stack vertically by default and are full-width by default. So, that's easy. <header> <h1> Header </h1> <header> <nav> <div> Nav content </div> <nav> <div> Main content </div> <aside> <ul> List Content </ul> </aside> prefer header and nav and aside to more generic div s - it is what they are for the desktop design though, we are goign to want to swap the order of the main and the aside and also have them horizontally and sized. Let's prepare for that by putting these two elements in a row of a fluid container, but initially set to full width and existing order. <header> <h1> Header </h1> </header> <nav> <div> Nav content </div> </nav> <div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-12 order-1\"> Main content </div> <aside class=\"col-12 order-2\"> <ul> List Content </ul> </aside> </div> </div> This will indent the main and aside slightly as the container elements will have a gutter around them. If we do not want that we can adjust the gutters. For the desktop version, we need to add some -md classess affecting the width and order of the main and aside. <header> <h1> Header </h1> </header> <nav> <div> Nav content </div> </nav> <div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-12 col-9-md order-1 order-2-md\"> Main content </div> <aside class=\"col-12 col-3-md order-2 order-1-md\"> <ul> List Content </ul> </aside> </div> </div> At this point the elements are in the correct arrangement and order and we would need to start adding more realistic content and worrying about the sizing. The header will be close. Let's add some color classes and see how it looks. We'll also center the text and add a little padding. ... <header class=\"bg-primary text-white p-2 text-center\"> <h1> Header </h1> </header> ... Note carefully where things are applied. The background and text colours are applied on the header so as to affect everything inside then. No work wil be done on styling the nav element. We just paste in a standard bootstrap navbar to get a feel for how things look. Notice that this completely replaces the original nav element ... <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\"> <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"#\">Link</a> </li> <li class=\"nav-item\"> <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav> ... The one thing you will (probably) want to do is change the navbar-expand-lg to navbar-expand-md so that the bar is show expanded on the desktop display We've done a bit so let's have the full html to this point. <!DOCTYPE html> <html> <head> <meta charset='UTF-8'> <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css'> <link rel='stylesheet' href='styles.css'> </head> <body> <header class=\"bg-primary text-white p-2 text-center\"> <h1>Header</h1> </header> <nav class=\"navbar navbar-expand-md navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\"> <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"#\">Link</a> </li> <li class=\"nav-item\"> <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav> <div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-12 col-md-9 order-1 order-md-2\"> Main content </div> <aside class=\"col-12 col-md-3 order-2 order-md-1\"> <ul> List Content? </ul> </aside> </div> </div> <script src='https://code.jquery.com/jquery-3.3.1.slim.min.js'></script> <script src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js'></script> <script src='https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js'></script> </body> </html> Next the aside list. This is going to be purely dummy content, so let's take a Bootstrap List Group. ... <aside class=\"col-12 col-md-3 order-2 order-md-1\"> <ul class=\"list-group\"> <li class=\"list-group-item active\">Cras justo odio</li> <li class=\"list-group-item\">Dapibus ac facilisis in</li> <li class=\"list-group-item\">Morbi leo risus</li> <li class=\"list-group-item\">Porta ac consectetur ac</li> <li class=\"list-group-item\">Vestibulum at eros</li> </ul> </aside> ...","title":"Start with mobile"},{"location":"git/git-basics/","text":"What it is, basics of use, what is covered Ashley Oliver, March 2017, revised Feb 2021 Git is an scvs, a source code versioning system. That is to say it can track a file or collection of files and record changes in a database. Later you can discover what the changes were or use them to revert to any earlier version. This is already useful for source code web sites assignments all can make use of this. It can be used simply as a (superior) kind of backup. It can do a lot more besides. Two quick examples of things git can do not covered in this guide: allow multiple versions of a set of files to exist and be being worked on at the same time while remaining independent of each other - this is covered by the branch commands make a pull request, that is push any changes you might make with your clone of a remote master version back to the server for a potential merge in to the online master - possibly with changes made by other people to different parts also being merged. Team-working and publishing, in other words. This guide covers the very basics and how to use git to track changes you have made as a single user. Another useful quick guide is here - however it assumes that you are working with a remote repository which probably won't be initially. Getting started Check that git is installed - from a command line prompt (either cmd.exe or powershell though the latter is to be preferred) simply type git . >git If you get usage prompts all is well. If you get 'no such command' ask someone how to install git. Let's make some files and folders to play around with (or you could use something you already have and play with that). Git works with folders though, not really with loose files (all subfolders under a folder containing a repository are assumed to be part of that repository). I am typing the following (PowerShell) >cd c:/tmp >mkdir root/b >cd root >echo >sample1.txt 'Hello World' >echo >sample2.txt 'Hello again, World' >echo >b/sample3.txt 'Still no answer, World?' ( odd random highlighting in console 'dumps' due to language issues ) So, at this point we have two folders with three dummy text files in them. We should be in folder c:/tmp/root which is the 'root' of our file structure. Now we need to put this folder under git control (aka make a new repository). You must be in the right folder before you do this. (Powershell by default shows the current folder as part of the prompt, so this is easy to see) >git init Initialized empty Git repository in C:/tmp/root/.git/ Key thing here is 'empty' we have created an empty respository. It is in root/.git (which you may or may not be able to see depending upon your settings for seeing hidden files; in powershell at least Get-ChildItem -Force or gci -fo will show hidden files). (If you prefer to create the backup at the same time, see the end of this document)it to you). To tell git which files we want to track we need to add them to the repository (filestore, database, where git keeps changes). >git add . This adds everything in the current folder and its sub-folders.[^fna] [^fna]:It is possible to have git ignore certain files by pattern or extension - for instance if working in Python there is no point in tracking .pyc files or you might have some very large static resources (images, movies, databases) that you do not want as part of your archive. Read about .gitignore * if you need to do that. There is no message which is fairly usual when things have gone ok. The usual rule is 'errors only'. If we want to see what we have done we could use the status command.type >git status On branch master Initial commit Changes to be committed: (use \"git rm --cached <file>... new file: b/sample3.txt new file: sample1.txt new file: sample2.txt What this is telling us is that these three files (and a sub-folder) are now being watched BUT are only 'changes to be committed' - nothing has yet been made permanent. Git also helpfully tells us how to remove something from this list. We do want to record our initial state so the next step is to commit ... > git commit -m 'Initial commit' [master (root-commit) 9f7b18f] Initial commit 3 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 b/sample3.txt create mode 100644 sample1.txt create mode 100644 sample2.txt Just git commit would have been an alternative in which case you would be invited to add a message. A commit should always have a message. \"Initial commit\" is the usual messge for a fresh repository. This tells us that three files were successfully added.[^fnb] [^fnb]:More detail: the 9f7b18f is a (part of) the hash for this commit, a unique identifier, which could be used to 'roll-back' to this state at any future time. You may also provide tags if you want a friendly label. The 'master' is the name of this branch, it could be anything, but defaults to master - most people use this name for the main, stable branch. Basic Workflow Summary Create a repository using git init (once) Add files to track (once per file, multiple files can be added) git add Commit files that have changed since the last commit git commit This might be all you want to do, but usually we want a secure remote as well. See Using a Remote . Some Party Tricks Okay we have a repo. Let's delete all our files - by mistake. C:\\Users\\ashley> cd c:/tmp C:\\tmp> ls Directory: C:\\tmp Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 20/03/2017 16:20 root C:\\tmp> cd root C:\\tmp\\root [master]> git status On branch master nothing to commit, working tree clean C:\\tmp\\root [master]> ls Directory: C:\\tmp\\root Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 20/03/2017 16:15 b -a---- 20/03/2017 16:13 28 sample1.txt -a---- 20/03/2017 16:15 42 sample2.txt C:\\tmp\\root [master]> rm -fo b ... C:\\tmp\\root [master +0 ~0 -1 !]> rm -fo *.txt C:\\tmp\\root> ls C:\\tmp\\root [master +0 ~0 -3 !]> ls C:\\tmp\\root [master +0 ~0 -3 !]> (confirmations of deletes omitted to save space) So as the last ls shows we have now destroyed all our files! Oh noes! My work iz gone! Except ... we haven't. >git checkout master -f >ls Directory: C:\\tmp\\root Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 21/03/2017 12:11 a -a---- 21/03/2017 12:11 30 sample1.txt -a---- 21/03/2017 12:11 42 sample2.txt Ta da! There they are, back again.[^fnc] [^fnc]:Why the -f, force, on the checkout command? Well, if you did it exactly as I have then the deleted files had not been committed. Git won't overwrite uncommitted changes without being made to! Generally it won't do anything that might lose data without being forced to. If you had first done a commit then once your status said 'nothing to commit' you could have just checked out a previous version (using its hash this time since 'master' - more technically HEAD - would be your most recent commit). That method reverts you to the last thing committed - if you had done another commit in the meantime (like before you noticed your mising files) you would need to know the hash of the commit you wanted to check out, which you can get from git log . (I have done one more commit first just so that there is more than one entry to seedisplayed).[^fnd] [^fnd]:if you just want to find hashes you might prefer git status pretty=oneline . Generally when supplying a hash to a command you only need to give enough to be unique, not the whole thing. With my example above git checkout f86d5843 would be understood correctly. > git log commit 2160774336222861a1374bd9411610976974a2bc Author: Ashley Oliver <ashley.p.oliver@gmail.com> Date: Tue Mar 21 12:18:54 2017 +0000 Restored files commit f86d5843102226b12770f1623e9a67186fcfcf24 Author: Ashley Oliver <ashley.p.oliver@gmail.com> Date: Tue Mar 21 12:10:41 2017 +0000 Initial commit You can do much, much more -- revert changes to individual files for instance, find the differences between two files, many other things There is a lot of excellent documentation out there for Git. You should, really should , think about creating an account for yourself on GitHub. You may also want to install a GUI for Git - although, as usual, you can actually do more with the command line once you have learned to use it. Basic git functionality is integrated into Visual Code. See the icon on the left hand side. Learn to use it. Really. Learn here . Git is also fully integrated into Visual Studio, although less obviously and intuitively. Alternative method of getting starting, explicit remote An alternative is to start by creating a an empty repository remotely , say on OneDrive, clone it locally, to give yourself an empty local repository and then start adding files to it. This sequence would look as follows. Note the way local paths are specified and obvioucly adjust to suit your system. This assumes that the OneDrive dekstop support is present so that you have a local folder being mirrored. The commands would be cd E:/Users/Sys/OneDrive mkdir gitrepo cd gitrepo git init --bare cd C:/Working git clone file:///E:/Users/Sys/OneDrive/gitrepo . E:/Users ... and C:/Working ... would be paths on your system, gitrepo is just a name and watch the triple '///' and the '.' in the last line. . Using a Remote First time only you will need to create an account on GitHub Your GitHub username - <uname> and password - <pwd> will be needed below. Tell your local git instance how to tag new commits git config -g user.name \"<uname>\" git config -g user.email \"<email>\" it is probably best to use the same email as you used in creating your GitHub account. The -g makes this a 'global' setting for git on your local machine, leave it out if you only want it to affect this workspace (only likely if you routinely use several different GitHub accouns in which case you would already know that). If you did create a private repo read Troubleshooting 1 before continuing ... create an empty repo on a remote fileserver accessible via URL. For GitHub this means press the 'New' button, come up with a name for the repo, possibly (depending on your account type) select Private/Public (use Public by default), you want an empty repo so do not check any of the boxes. Copy the repo url it wil be something like https://github.com/<uname>/<repo> Back in a Visual Code terminal git remote add origin <url> + and then git push origin master ('origin' is just a name, but is what we commonly call the remote repo. 'master' is just a name but is what the local branch will be called unless you have changed it) Visual Studio Code supports a simple 'sync' command, as do many other IDEs, (the little circular two-arrow icon bottom left) but to sync manually after future changes you could ... make a local commit git fetch origin (not needed if you are sure there are no changes in the remote, which would usually be the case if you are the only person using the repo) git push origin master Workflow with a remote Almost the same Commit files that have changed since the last commit git add and then git commit at the command line. If using Visual Code, all changed files wil be added to your commit by default, so all that is necessary is select the git action tab, enter a commit message and hit the 'tick' icon. Sync with the remote. Technically you should do a git pull and then a git push but if you are the only user and you have changed nothing directly on GitHub then the 'pull' is unnecessary. If using Visual Code just hit he sync icon bottom left in the status bar (circular, two arrows) That's it. Troubleshooting If your repo was private you may get 'repo not found' when you push. This is because your local machine does not have write access to the repo. If you had already added the remote, remove it git remote rm origin then re-add it but this time including your GitHub credentials git remote add origin https://<uname>:<pwd>@github.com/<uname>/<repo> If you are behind a corporate firewall of the \"I am going to forge certificates so that I can snoop on your encrypted communications\" type, you may get authentication errors when using https. Try this to fix it git config -g http.sslVerify false Original version of this document written with StackEdit .","title":"Basics"},{"location":"git/git-basics/#what-it-is-basics-of-use-what-is-covered","text":"","title":"What it is, basics of use, what is covered"},{"location":"git/git-basics/#ashley-oliver-march-2017-revised-feb-2021","text":"Git is an scvs, a source code versioning system. That is to say it can track a file or collection of files and record changes in a database. Later you can discover what the changes were or use them to revert to any earlier version. This is already useful for source code web sites assignments all can make use of this. It can be used simply as a (superior) kind of backup. It can do a lot more besides. Two quick examples of things git can do not covered in this guide: allow multiple versions of a set of files to exist and be being worked on at the same time while remaining independent of each other - this is covered by the branch commands make a pull request, that is push any changes you might make with your clone of a remote master version back to the server for a potential merge in to the online master - possibly with changes made by other people to different parts also being merged. Team-working and publishing, in other words. This guide covers the very basics and how to use git to track changes you have made as a single user. Another useful quick guide is here - however it assumes that you are working with a remote repository which probably won't be initially.","title":"Ashley Oliver, March 2017, revised Feb 2021"},{"location":"git/git-basics/#getting-started","text":"Check that git is installed - from a command line prompt (either cmd.exe or powershell though the latter is to be preferred) simply type git . >git If you get usage prompts all is well. If you get 'no such command' ask someone how to install git. Let's make some files and folders to play around with (or you could use something you already have and play with that). Git works with folders though, not really with loose files (all subfolders under a folder containing a repository are assumed to be part of that repository). I am typing the following (PowerShell) >cd c:/tmp >mkdir root/b >cd root >echo >sample1.txt 'Hello World' >echo >sample2.txt 'Hello again, World' >echo >b/sample3.txt 'Still no answer, World?' ( odd random highlighting in console 'dumps' due to language issues ) So, at this point we have two folders with three dummy text files in them. We should be in folder c:/tmp/root which is the 'root' of our file structure. Now we need to put this folder under git control (aka make a new repository). You must be in the right folder before you do this. (Powershell by default shows the current folder as part of the prompt, so this is easy to see) >git init Initialized empty Git repository in C:/tmp/root/.git/ Key thing here is 'empty' we have created an empty respository. It is in root/.git (which you may or may not be able to see depending upon your settings for seeing hidden files; in powershell at least Get-ChildItem -Force or gci -fo will show hidden files). (If you prefer to create the backup at the same time, see the end of this document)it to you). To tell git which files we want to track we need to add them to the repository (filestore, database, where git keeps changes). >git add . This adds everything in the current folder and its sub-folders.[^fna] [^fna]:It is possible to have git ignore certain files by pattern or extension - for instance if working in Python there is no point in tracking .pyc files or you might have some very large static resources (images, movies, databases) that you do not want as part of your archive. Read about .gitignore * if you need to do that. There is no message which is fairly usual when things have gone ok. The usual rule is 'errors only'. If we want to see what we have done we could use the status command.type >git status On branch master Initial commit Changes to be committed: (use \"git rm --cached <file>... new file: b/sample3.txt new file: sample1.txt new file: sample2.txt What this is telling us is that these three files (and a sub-folder) are now being watched BUT are only 'changes to be committed' - nothing has yet been made permanent. Git also helpfully tells us how to remove something from this list. We do want to record our initial state so the next step is to commit ... > git commit -m 'Initial commit' [master (root-commit) 9f7b18f] Initial commit 3 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 b/sample3.txt create mode 100644 sample1.txt create mode 100644 sample2.txt Just git commit would have been an alternative in which case you would be invited to add a message. A commit should always have a message. \"Initial commit\" is the usual messge for a fresh repository. This tells us that three files were successfully added.[^fnb] [^fnb]:More detail: the 9f7b18f is a (part of) the hash for this commit, a unique identifier, which could be used to 'roll-back' to this state at any future time. You may also provide tags if you want a friendly label. The 'master' is the name of this branch, it could be anything, but defaults to master - most people use this name for the main, stable branch.","title":"Getting started"},{"location":"git/git-basics/#basic-workflow-summary","text":"Create a repository using git init (once) Add files to track (once per file, multiple files can be added) git add Commit files that have changed since the last commit git commit This might be all you want to do, but usually we want a secure remote as well. See Using a Remote .","title":"Basic Workflow Summary"},{"location":"git/git-basics/#some-party-tricks","text":"Okay we have a repo. Let's delete all our files - by mistake. C:\\Users\\ashley> cd c:/tmp C:\\tmp> ls Directory: C:\\tmp Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 20/03/2017 16:20 root C:\\tmp> cd root C:\\tmp\\root [master]> git status On branch master nothing to commit, working tree clean C:\\tmp\\root [master]> ls Directory: C:\\tmp\\root Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 20/03/2017 16:15 b -a---- 20/03/2017 16:13 28 sample1.txt -a---- 20/03/2017 16:15 42 sample2.txt C:\\tmp\\root [master]> rm -fo b ... C:\\tmp\\root [master +0 ~0 -1 !]> rm -fo *.txt C:\\tmp\\root> ls C:\\tmp\\root [master +0 ~0 -3 !]> ls C:\\tmp\\root [master +0 ~0 -3 !]> (confirmations of deletes omitted to save space) So as the last ls shows we have now destroyed all our files! Oh noes! My work iz gone! Except ... we haven't. >git checkout master -f >ls Directory: C:\\tmp\\root Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 21/03/2017 12:11 a -a---- 21/03/2017 12:11 30 sample1.txt -a---- 21/03/2017 12:11 42 sample2.txt Ta da! There they are, back again.[^fnc] [^fnc]:Why the -f, force, on the checkout command? Well, if you did it exactly as I have then the deleted files had not been committed. Git won't overwrite uncommitted changes without being made to! Generally it won't do anything that might lose data without being forced to. If you had first done a commit then once your status said 'nothing to commit' you could have just checked out a previous version (using its hash this time since 'master' - more technically HEAD - would be your most recent commit). That method reverts you to the last thing committed - if you had done another commit in the meantime (like before you noticed your mising files) you would need to know the hash of the commit you wanted to check out, which you can get from git log . (I have done one more commit first just so that there is more than one entry to seedisplayed).[^fnd] [^fnd]:if you just want to find hashes you might prefer git status pretty=oneline . Generally when supplying a hash to a command you only need to give enough to be unique, not the whole thing. With my example above git checkout f86d5843 would be understood correctly. > git log commit 2160774336222861a1374bd9411610976974a2bc Author: Ashley Oliver <ashley.p.oliver@gmail.com> Date: Tue Mar 21 12:18:54 2017 +0000 Restored files commit f86d5843102226b12770f1623e9a67186fcfcf24 Author: Ashley Oliver <ashley.p.oliver@gmail.com> Date: Tue Mar 21 12:10:41 2017 +0000 Initial commit You can do much, much more -- revert changes to individual files for instance, find the differences between two files, many other things There is a lot of excellent documentation out there for Git. You should, really should , think about creating an account for yourself on GitHub. You may also want to install a GUI for Git - although, as usual, you can actually do more with the command line once you have learned to use it. Basic git functionality is integrated into Visual Code. See the icon on the left hand side. Learn to use it. Really. Learn here . Git is also fully integrated into Visual Studio, although less obviously and intuitively.","title":"Some Party Tricks"},{"location":"git/git-basics/#alternative-method-of-getting-starting-explicit-remote","text":"An alternative is to start by creating a an empty repository remotely , say on OneDrive, clone it locally, to give yourself an empty local repository and then start adding files to it. This sequence would look as follows. Note the way local paths are specified and obvioucly adjust to suit your system. This assumes that the OneDrive dekstop support is present so that you have a local folder being mirrored. The commands would be cd E:/Users/Sys/OneDrive mkdir gitrepo cd gitrepo git init --bare cd C:/Working git clone file:///E:/Users/Sys/OneDrive/gitrepo . E:/Users ... and C:/Working ... would be paths on your system, gitrepo is just a name and watch the triple '///' and the '.' in the last line. .","title":"Alternative method of getting starting, explicit remote"},{"location":"git/git-basics/#using-a-remote","text":"","title":"Using a Remote"},{"location":"git/git-basics/#first-time-only","text":"you will need to create an account on GitHub Your GitHub username - <uname> and password - <pwd> will be needed below. Tell your local git instance how to tag new commits git config -g user.name \"<uname>\" git config -g user.email \"<email>\" it is probably best to use the same email as you used in creating your GitHub account. The -g makes this a 'global' setting for git on your local machine, leave it out if you only want it to affect this workspace (only likely if you routinely use several different GitHub accouns in which case you would already know that). If you did create a private repo read Troubleshooting 1 before continuing ... create an empty repo on a remote fileserver accessible via URL. For GitHub this means press the 'New' button, come up with a name for the repo, possibly (depending on your account type) select Private/Public (use Public by default), you want an empty repo so do not check any of the boxes. Copy the repo url it wil be something like https://github.com/<uname>/<repo> Back in a Visual Code terminal git remote add origin <url> + and then git push origin master ('origin' is just a name, but is what we commonly call the remote repo. 'master' is just a name but is what the local branch will be called unless you have changed it) Visual Studio Code supports a simple 'sync' command, as do many other IDEs, (the little circular two-arrow icon bottom left) but to sync manually after future changes you could ... make a local commit git fetch origin (not needed if you are sure there are no changes in the remote, which would usually be the case if you are the only person using the repo) git push origin master","title":"First time only"},{"location":"git/git-basics/#workflow-with-a-remote","text":"Almost the same Commit files that have changed since the last commit git add and then git commit at the command line. If using Visual Code, all changed files wil be added to your commit by default, so all that is necessary is select the git action tab, enter a commit message and hit the 'tick' icon. Sync with the remote. Technically you should do a git pull and then a git push but if you are the only user and you have changed nothing directly on GitHub then the 'pull' is unnecessary. If using Visual Code just hit he sync icon bottom left in the status bar (circular, two arrows) That's it.","title":"Workflow with a remote"},{"location":"git/git-basics/#troubleshooting","text":"If your repo was private you may get 'repo not found' when you push. This is because your local machine does not have write access to the repo. If you had already added the remote, remove it git remote rm origin then re-add it but this time including your GitHub credentials git remote add origin https://<uname>:<pwd>@github.com/<uname>/<repo> If you are behind a corporate firewall of the \"I am going to forge certificates so that I can snoop on your encrypted communications\" type, you may get authentication errors when using https. Try this to fix it git config -g http.sslVerify false Original version of this document written with StackEdit .","title":"Troubleshooting"},{"location":"git/git-bys/","text":"Git Training Pre-Flight Check List Intro There are two ways to use git, from the command line or from something with more integrated GUI support such as Visual Studio Code. Using the command line To open a command line prompt (aka shell prompt, terminal window) from the Windows desktop do this: Right-click on the Start icon of the Task Bar and select 'Windows PowerShell'.[^1] [^1]:You may occasionally need 'Windows PowerShell (Admin)', but typically only to install software from the command line If you are inside Visual Studio Code, you get a command line (open a terminal window) by typing Ctrl-Shift-@ , seen here in the bottom-right pane, marked with a yellow rectangle. Testing that git is installed Type 'git' at the command line prompt. If it is installed you will get a help message, as above. If it is not you will get an error, usually some flavour of 'Unrecognized Command'. If you need to install git The one-stop shop is Git For Windows . Download and run the installer. Do I need Visual Studio Code (VSC) Need? No. But it is nice to have and relieves your memory of the burden of remembering some common git commands. If VSC is installed you can find it by Search or by looking in the Start Menus. You can also type code . at a command prompt which will open it at the current folder. If you want to install Visual Studio Code Head to Download Visual Studio Code . You will want the 64 bit User Installer unless you know better.[^2] [^2]:The User installer installs just for the current user. The System installer installs for everyone, but requires admin rights. Once again, just run the installer and let it finish. You are ready to start learning how to use git","title":"Before You Start"},{"location":"git/git-bys/#git-training-pre-flight-check-list","text":"","title":"Git Training Pre-Flight Check List"},{"location":"git/git-bys/#intro","text":"There are two ways to use git, from the command line or from something with more integrated GUI support such as Visual Studio Code.","title":"Intro"},{"location":"git/git-bys/#using-the-command-line","text":"To open a command line prompt (aka shell prompt, terminal window) from the Windows desktop do this: Right-click on the Start icon of the Task Bar and select 'Windows PowerShell'.[^1] [^1]:You may occasionally need 'Windows PowerShell (Admin)', but typically only to install software from the command line If you are inside Visual Studio Code, you get a command line (open a terminal window) by typing Ctrl-Shift-@ , seen here in the bottom-right pane, marked with a yellow rectangle.","title":"Using the command line"},{"location":"git/git-bys/#testing-that-git-is-installed","text":"Type 'git' at the command line prompt. If it is installed you will get a help message, as above. If it is not you will get an error, usually some flavour of 'Unrecognized Command'.","title":"Testing that git is installed"},{"location":"git/git-bys/#if-you-need-to-install-git","text":"The one-stop shop is Git For Windows . Download and run the installer.","title":"If you need to install git"},{"location":"git/git-bys/#do-i-need-visual-studio-code-vsc","text":"Need? No. But it is nice to have and relieves your memory of the burden of remembering some common git commands. If VSC is installed you can find it by Search or by looking in the Start Menus. You can also type code . at a command prompt which will open it at the current folder.","title":"Do I need Visual Studio Code (VSC)"},{"location":"git/git-bys/#if-you-want-to-install-visual-studio-code","text":"Head to Download Visual Studio Code . You will want the 64 bit User Installer unless you know better.[^2] [^2]:The User installer installs just for the current user. The System installer installs for everyone, but requires admin rights. Once again, just run the installer and let it finish.","title":"If you want to install Visual Studio Code"},{"location":"git/git-bys/#you-are-ready-to-start-learning-how-to-use-git","text":"","title":"You are ready to start learning how to use git"}]}